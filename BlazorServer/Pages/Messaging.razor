@page "/chat"
@using BlazorServer.Data.Database
@using BlazorServer.Data.Helpers
@using BlazorServer.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject UserConnectionMapper mapper
@inject NavigationManager NavManager
@inject LoginSession loginSession
@inject CookiesManager cookiesManager
@inject MessagesContext DbContext

@if (_isLoading)
{
    <h1>Loading...</h1>
}
else if (loginSession?.currentUser?.username is null)
{

    <h1> You are not logged in</h1>    
}
else
{
    <div class="container-fluid">
        <div class="row">
            <!-- Left Column: Friend List -->
            <div class="col-md-4">
                <div class="friend-list">
                    <h3>Friends</h3>
                    <ul class="list-group">
                        @foreach (var user in loginSession.GetAllUsers())
                        {
                            <li class="list-group-item @(user.username.Equals(recipient?.username) ? "active" : "")" @onclick="() => RecipientSelected(user)">
                                @if (String.IsNullOrEmpty(mapper.GetConnectionId(user.username)))
                                {
                                    <p>
                                        @user.username
                                    </p>
                                }
                                else
                                {
                                    <p>@user.username <span class="badge badge-success">Online</span></p>
                                }
                            </li>
                        }                        
                    </ul>
                </div>
            </div>
            <!-- Right Column: Chat Box -->
            <div class="col-md-8">
                <div class="chat-box">
                    <div class="container mt-5">
                        <div class="card">
                            <div class="card-header">
                                Chat with @recipient?.username
                            </div>
                            <div class="card-body scrollable-list">
                                <ul class="list-group">
                                    @foreach (var message in GetFilteredMessages())
                                    {
                                        <li class="list-group-item" >@message.message</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mt-3">
                        <textarea class="form-control" placeholder="Type your message" @bind="messageInput"></textarea>
                        <div class="input-group-append">
                            <button class="btn-primary" @onclick="SendToUser" disabled="@(IsConnected==false)">Send to a user</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private HubConnection? hubConnection;
    private List<Message>? messages;
    private string? messageInput;
    private bool _isLoading = true;

    private User? recipient;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {     
            messages = DbContext.UserMessages.ToList() ?? new List<Message>(); 
            //Todo get messages from db not all by once, take 10 last messages from each user
            var session = await cookiesManager.GetCookie<LoginSession>("boring-media-cookie");
            if (session is not null)
            {
                loginSession.currentUser = session.currentUser;
                loginSession.IsUserLoggedIn = session.IsUserLoggedIn;
            }
            

            hubConnection = new HubConnectionBuilder()
                         .WithUrl(NavManager.ToAbsoluteUri("/chatHub")) //setup connection
                         .WithAutomaticReconnect()
                         .Build(); 

            hubConnection.On<Message>("ReceiveMessage", (message) => //listener for receive
            {
                messages.Add(message);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            mapper.MapUserToConnection(await hubConnection.InvokeAsync<string>("GetConnectionId"),
            loginSession?.currentUser);

            loginSession?.IvokeMenuUpdate();
            _isLoading = false;
            RecipientSelected(loginSession.GetAllUsers().First());
            StateHasChanged();
        }
    }

    private IEnumerable<Message> GetFilteredMessages()
    {
        if (recipient is null || loginSession?.currentUser is null)
        {
            return Enumerable.Empty<Message>();
        }

        return messages?.Where(x =>
            (x.senderUserName.Equals(recipient.username) && x.recipientName.Equals(loginSession.currentUser.username)) ||
            (x.recipientName.Equals(recipient.username) && x.senderUserName.Equals(loginSession.currentUser.username))
        ) ?? Enumerable.Empty<Message>();
    }

    private async Task SendToUser()
    {
        var recipientId = mapper.GetConnectionId(recipient?.username);
        var currentId = mapper.GetConnectionId(loginSession?.currentUser?.username);
        var recipientName = recipient?.username;
        var senderName = loginSession?.currentUser?.username;

        if (messageInput is null || recipientName is null || senderName is null){ return; }

        var message = new Message(recipientId, currentId, recipientName, senderName, messageInput);
        DbContext.UserMessages.Add(message);
        await DbContext.SaveChangesAsync();

        if (recipientId is null || currentId is null || hubConnection is null)
        {
            messages?.Add(message); //if the user is not online, just show the message locally after being saved to db
            StateHasChanged();
            return;
        }
        else
        {
            await hubConnection.SendAsync("SendMessageToUser", message);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() // TODO do something like on close or something
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void RecipientSelected(User selectedUser)
    {
        recipient= selectedUser;
        StateHasChanged();    
    }
}
